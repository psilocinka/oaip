#include <iostream>
#include <stack>
#include <sstream>
#include <cmath>

using namespace std;

int precedence(char op) {
    if (op == '+' || op == '-') {
        return 1;
    }
    else if (op == '*' || op == '/') {
        return 2;
    }
    else {
        return 0;
    }
}

string infix_to_postfix(const string& expression) {
    stack<char> stack;
    string postfix;
    for (char c : expression) {
        if (isdigit(c) || c == '.') {
            postfix += c;
        }
        else if (c == '(') {
            stack.push(c);
        }
        else if (c == ')') {
            while (!stack.empty() && stack.top() != '(') {
                postfix += ' ';
                postfix += stack.top();
                stack.pop();
            }
            stack.pop();
        }
        else if (c == '+' || c == '-' || c == '*' || c == '/') {
            postfix += ' ';
            while (!stack.empty() && precedence(stack.top()) >= precedence(c)) {
                postfix += stack.top();
                postfix += ' ';
                stack.pop();
            }
            stack.push(c);
        }
    }
    while (!stack.empty()) {
        postfix += ' ';
        postfix += stack.top();
        stack.pop();
    }
    return postfix;
}

double evaluate_rpn(const string& expression) {
    stack<double> stack;
    stringstream ss(expression);
    string token;
    while (getline(ss, token, ' ')) {
        if (token == "+" || token == "-" || token == "*" || token == "/") {
            double right_operand = stack.top();
            stack.pop();
            double left_operand = stack.top();
            stack.pop();
            if (token == "+") {
                stack.push(left_operand + right_operand);
            }
            else if (token == "-") {
                stack.push(left_operand - right_operand);
            }
            else if (token == "*") {
                stack.push(left_operand * right_operand);
            }
            else {
                stack.push(left_operand / right_operand);
            }
        }
        else {
            stack.push(stod(token));
        }
    }
    return stack.top();
}



int main()
{
    string expression = "9.7*(8.2-3.6+4.1)/0.5";
    string postfix = infix_to_postfix(expression);
    cout << postfix << endl;
    double result = evaluate_rpn(postfix);
    cout << result;
    return 0;
}
/*
9.7*(8.2-3.6+4.1)/0.5
*/
